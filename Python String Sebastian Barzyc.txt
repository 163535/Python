1.55 https://www.w3resource.com/python-exercises/string/python-data-type-string-exercise-55.php
Write a Python program to find the first repeated word in a given string.

def first_repeated_word(str1):
    temp = set()
    for word in str1.split():
        if word in temp:
            return word 
        else:
            temp.add(word)
    return 'None'

print(first_repeated_word("ab ca bc ab"))
print(first_repeated_word("ab ca bc ab ca ab bc"))
print(first_repeated_word("ab ca bc ca ab bc"))
print(first_repeated_word("ab ca bc")) 

1.56 https://www.w3resource.com/python-exercises/string/python-data-type-string-exercise-56.php
Write a Python program to find the second most repeated word in a given string.

def word_count(str):
    counts = dict()
    words = str.split()
    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1
    counts_x = sorted(counts.items(), key=lambda kv: kv[1])
    return counts_x[-2]

print(word_count("Both of these issues are fixed by postponing the evaluation of annotations. Instead of compiling code which executes expressions in annotations at their definition time, the compiler stores the annotation in a string form equivalent to the AST of the expression in question. If needed, annotations can be resolved at runtime using typing.get_type_hints(). In the common case where this is not required, the annotations are cheaper to store (since short strings are interned by the interpreter) and make startup time faster.")) 

1.57 https://www.w3resource.com/python-exercises/string/python-data-type-string-exercise-57.php
Write a Python program to remove spaces from a given string.

def remove_spaces(str1):
    str1 = str1.replace(' ', '')
    return str1  # Return the modified string without spaces.
print(remove_spaces("w 3 res ou r ce"))
print(remove_spaces("a b c"))

1.58 https://www.w3resource.com/python-exercises/string/python-data-type-string-exercise-58.php
Write a Python program to move spaces to the front of a given string.

def move_Spaces_front(str1):
    noSpaces_char = [ch for ch in str1 if ch != ' ']
    spaces_char = len(str1) - len(noSpaces_char)
    result = ' ' * spaces_char
    result = '"' + result + ''.join(noSpaces_char) + '"'
    return result
print(move_Spaces_front("w3resource .  com  "))
print(move_Spaces_front("   w3resource.com  ")) 

1.60 https://www.w3resource.com/python-exercises/string/python-data-type-string-exercise-60.php
Write a Python program to capitalize the first and last letters of each word in a given string.

def capitalize_first_last_letters(str1):
    str1 = result = str1.title()
    result = ""
    for word in str1.split():
        result += word[:-1] + word[-1].upper() + " "
    return result[:-1]
print(capitalize_first_last_letters("python exercises practice solution"))
print(capitalize_first_last_letters("w3resource")) 

1.61 https://www.w3resource.com/python-exercises/string/python-data-type-string-exercise-61.php
Write a Python program to remove duplicate characters from a given string.

from collections import OrderedDict
def remove_duplicate(str1):
    unique_characters = OrderedDict.fromkeys(str1)
    return "".join(unique_characters.keys())
result1 = remove_duplicate("python exercises practice solution")
print(result1)  
result2 = remove_duplicate("w3resource")
print(result2)  

1.62 https://www.w3resource.com/python-exercises/string/python-data-type-string-exercise-62.php
Write a Python program to compute the sum of the digits in a given string.

def sum_digits_string(str1):
    sum_digit = 0
    for char in str1:
        if char.isdigit():
            digit = int(char)
            sum_digit += digit
    return sum_digit
result1 = sum_digits_string("123abcd45")
print(result1)
result2 = sum_digits_string("abcd1234")
print(result2)

1.63 https://www.w3resource.com/python-exercises/string/python-data-type-string-exercise-63.php
Write a Python program to remove leading zeros from an IP address.

def remove_zeros_from_ip(ip_add):
  new_ip_add = ".".join([str(int(i)) for i in ip_add.split(".")])  
  return new_ip_add ;
print(remove_zeros_from_ip("255.024.01.01"))
print(remove_zeros_from_ip("127.0.0.01 ")) 

1.64 https://www.w3resource.com/python-exercises/string/python-data-type-string-exercise-64.php
Write a Python program to find the maximum length of consecutive 0's in a given binary string.

def max_consecutive_0(input_str):
   return max(map(len,input_str.split('1'))) 
str1 = '111000010000110'
print("Original string:" + str1)  
print("Maximum length of consecutive 0’s:")
print(max_consecutive_0(str1))
str1 = '111000111' 
print("Original string:" + str1)
print("Maximum length of consecutive 0’s:")
print(max_consecutive_0(str1)) 

1.65 https://www.w3resource.com/python-exercises/string/python-data-type-string-exercise-65.php
Write a Python program to find all the common characters in lexicographical order from two given lower case strings. If there are no similar letters print "No common characters".

from collections import Counter  
def common_chars(str1,str2):
  d1 = Counter(str1)  
  d2 = Counter(str2)
  common_dict = d1 & d2
  if len(common_dict) == 0:
    return "No common characters."
  common_chars = list(common_dict.elements())
  common_chars = sorted(common_chars)
  return ''.join(common_chars)
str1 = 'Python'
str2 = 'PHP'
print("Two strings: "+str1+' : '+str2)
print(common_chars(str1, str2))
str1 = 'Java'
str2 = 'PHP'
print("Two strings: "+str1+' : '+str2) 
print(common_chars(str1, str2)) 

1.66 https://www.w3resource.com/python-exercises/string/python-data-type-string-exercise-66.php
Write a Python program to make two given strings (lower case, may or may not be of the same length) anagrams without removing any characters from any of the strings.

def make_map(s):
  temp_map = {}
  for char in s:
    if char not in temp_map:
      temp_map[char] = 1 
    else:
      temp_map[char] += 1
  return temp_map
def make_anagram(str1, str2):
  str1_map1 = make_map(str1)
  str2_map2 = make_map(str2)
  ctr = 0
  for key in str2_map2.keys():
    if key not in str1_map1:
      ctr += str2_map2[key]
    else:
      ctr += max(0, str2_map2[key]-str1_map1[key])
  for key in str1_map1.keys():
    if key not in str2_map2:
      ctr += str1_map1[key]
    else:
      ctr += max(0, str1_map1[key]-str2_map2[key])
  return ctr
str1 = input("Input string1: ")
str2 = input("Input string2: ")
print(make_anagram(str1, str2)) 

1.67 https://www.w3resource.com/python-exercises/string/python-data-type-string-exercise-67.php
Write a Python program to remove all consecutive duplicates of a given string.

from itertools import groupby 
def remove_all_consecutive(str1):
  result_str = []
  for (key,group) in groupby(str1):
    result_str.append(key)
  return ''.join(result_str)
str1 = 'xxxxxyyyyy'
print("Original string:" + str1)
print("After removing consecutive duplicates:")
print(remove_all_consecutive(str1)) 

1.68 https://www.w3resource.com/python-exercises/string/python-data-type-string-exercise-68.php
Write a Python program to generate two strings from a given string. For the first string, use the characters that occur only once, and for the second, use the characters that occur multiple times in the said string.

from collections import Counter
def generateStrings(input):
  str_char_ctr = Counter(input) 
  part1 = [key for (key,count) in str_char_ctr.items() if count==1]
  part2 = [key for (key,count) in str_char_ctr.items() if count>1]
  part1.sort()
  part2.sort()
  return part1,part2
input = "aabbcceffgh"
s1, s2 = generateStrings(input) 
print(''.join(s1))
print(''.join(s2))

1.71 https://www.w3resource.com/python-exercises/string/python-data-type-string-exercise-71.php
Write a Python program to move all spaces to the front of a given string in a single traversal.

def moveSpaces(str1):
  no_spaces = [char for char in str1 if char!=' ']
  space = len(str1) - len(no_spaces)
  result = ' '*space
  return result + ''.join(no_spaces)
s1 = "Python Exercises"  
print("Original String:\n",s1)
print("\nAfter moving all spaces to the front:")
print(moveSpaces(s1)) 

1.77 https://www.w3resource.com/python-exercises/string/python-data-type-string-exercise-77.php
Write a Python program to count the number of non-empty substrings of a given string.

def number_of_substrings(str):
  str_len = len(str);  
  return int(str_len * (str_len + 1) / 2);
str1 = input("Input a string: ")
print("Number of substrings:")
print(number_of_substrings(str1)) 

1.78 https://www.w3resource.com/python-exercises/string/python-data-type-string-exercise-78.php
Write a Python program to count characters at the same position in a given string (lower and uppercase characters) as in the English alphabet.

def count_char_position(str1):
  count_chars = 0
  for i in range(len(str1)):
    if ((i == ord(str1[i]) - ord('A')) or 
        (i == ord(str1[i]) - ord('a'))):
      count_chars += 1
  return count_chars
str1 = input("Input a string: ")
print("Number of characters of the said string at same position as in English alphabet:")
print(count_char_position(str1)) 

1.80 https://www.w3resource.com/python-exercises/string/python-data-type-string-exercise-80.php
Write a Python program to count the number of substrings with the same first and last characters in a given string.
 
def no_of_substring_with_equalEnds(str1):
  result = 0;
  n = len(str1);
  for i in range(n):
    for j in range(i, n):
      if (str1[i] == str1[j]):
        result = result + 1
  return result
str1 = input("Input a string: ")
print(no_of_substring_with_equalEnds(str1))

1.81 https://www.w3resource.com/python-exercises/string/python-data-type-string-exercise-81.php
Write a Python program to determine the index of a given string at which a certain substring starts. If the substring is not found in the given string return 'Not found'.

def find_Index(str1, pos):
  if len(pos) > len(str1):
    return 'Not found'
  for i in range(len(str1)):
    for j in range(len(pos)):
      if str1[i + j] == pos[j] and j == len(pos) - 1:
        return i
      elif str1[i + j] != pos[j]:
        break
  return 'Not found'
print(find_Index("Python Exercises", "Ex"))
print(find_Index("Python Exercises", "yt"))
print(find_Index("Python Exercises", "PY"))

1.94 https://www.w3resource.com/python-exercises/string/python-data-type-string-exercise-94.php
Write a Python program to convert a hexadecimal color code to a tuple of integers corresponding to its RGB components.
Use a list comprehension in combination with int() and list slice notation to get the RGB components from the hexadecimal string.
Use tuple() to convert the resulting list to a tuple.

def hex_to_rgb(hex):
    return tuple(int(hex[i:i+2], 16) for i in (0, 2, 4))
print(hex_to_rgb('FFA501'))
print(hex_to_rgb('FFFFFF'))
print(hex_to_rgb('000000'))
print(hex_to_rgb('FF0000'))
print(hex_to_rgb('000080'))
print(hex_to_rgb('C0C0C0')) 

1.96 https://www.w3resource.com/python-exercises/string/python-data-type-string-exercise-96.php
Write a Python program to convert a given string to Camelcase.
Use re.sub() to replace any - or _ with a space, using the regexp r"(_|-)+".
Use str.title() to capitalize the first letter of each word and convert the rest to lowercase.
Finally, use str.replace() to remove spaces between words.

from re import sub
def camel_case(s):
    s = sub(r"(_|-)+", " ", s).title().replace(" ", "")
    return ''.join([s[0].lower(), s[1:]])
print(camel_case('JavaScript'))
print(camel_case('Foo-Bar'))
print(camel_case('foo_bar'))
print(camel_case('--foo.bar'))
print(camel_case('Foo-BAR'))
print(camel_case('fooBAR'))
print(camel_case('foo bar')) 